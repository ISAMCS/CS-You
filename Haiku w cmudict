import random
import nltk
nltk.download('cmudict')
from nltk.corpus import cmudict

d = cmudict.dict()

def count_syllables(word):
    word = word.lower()
    if word in d:
        return max([len([y for y in x if y[-1].isdigit()]) for x in d[word]])
    else:
        return None  # Return None for words not in the dictionary

word_bank = [
    "cherry", "blossom", "mountain", "river", "moon",
    "autumn", "leaf", "whisper", "silence", "bamboo",
    "twilight", "dewdrop", "firefly", "butterfly", "breeze",
    "sunlight", "shadow", "reflection", "serenity", "harmony"
]

new_word1 = input("Insert New Word 1: ")
new_word2 = input("Insert New Word 2: ")
new_word3 = input("Insert New Word 3: ")

new_words = [new_word1, new_word2, new_word3]

# Check if the input is not empty before appending to word_bank.
for new_word in new_words:
    if new_word:
        word_bank.append(new_word)

print("Updated word bank:", word_bank)

valid_words = {word: count_syllables(word) for word in word_bank if count_syllables(word) is not None}
invalid_words = [word for word in word_bank if count_syllables(word) is None]

print("Valid words:")
for word, syllables in valid_words.items():
    print(f"{word}: {syllables} syllables")

print("\nInvalid words:")
for word in invalid_words:
    print(f"{word}: Invalid for haiku")

def generate_haiku_line(target_syllables, forced_word=None):
    line = []
    syllable_count = 0
    if forced_word and forced_word in valid_words:
        line.append(forced_word)
        syllable_count += valid_words[forced_word]
    while syllable_count < target_syllables:
        word = random.choice(list(valid_words.keys()))
        word_syllables = valid_words[word]
        if syllable_count + word_syllables <= target_syllables:
            line.append(word)
            syllable_count += word_syllables
    return " ".join(line)

def generate_haiku():
    # Ensure at least one new word is included
    forced_word = random.choice([word for word in new_words if word in valid_words])
    haiku = [
        generate_haiku_line(5, forced_word),
        generate_haiku_line(7),
        generate_haiku_line(5)
    ]
    return "\n".join(haiku)

haiku = generate_haiku()

if haiku:
    print("Generated Haiku:")
    print(haiku)
else:
    print("Failed to generate a haiku.")
    print(haiku)
else:
    print("Failed to generate a haiku.")
